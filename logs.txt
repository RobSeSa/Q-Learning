====================================================================
Epsilon: 0.9
Discount Factor: 0.9
Learning Rate: 0.9
Matrix width: 10
Matrix height: 10
Randomly generated matrix:
[[-100 -100 -100 -100 -100  100 -100 -100 -100 -100]
 [-100   -1   -1   -1   -1   -1   -1 -100   -1 -100]
 [-100   -1   -1 -100 -100   -1   -1   -1 -100 -100]
 [-100   -1 -100 -100   -1   -1   -1 -100   -1 -100]
 [-100 -100 -100   -1 -100   -1   -1   -1   -1 -100]
 [-100   -1   -1   -1 -100   -1   -1   -1   -1 -100]
 [-100   -1   -1   -1   -1 -100 -100   -1   -1 -100]
 [-100 -100   -1   -1   -1   -1   -1   -1   -1 -100]
 [-100 -100   -1   -1   -1   -1   -1   -1   -1 -100]
 [-100 -100 -100 -100 -100 -100 -100 -100 -100 -100]]

Testing the times of each implementation
==================================
Python implementation:
==================================
(8, 8) (7, 8) (7, 7) (6, 7) (5, 7) (5, 6) (4, 6) (3, 6) (2, 6) (2, 5) (1, 5) (0, 5) 
89.0
python3 q_learning.py  1.02s user 0.24s system 157% cpu 0.803 total


==================================
C implementation:
==================================
clang -Wall -Wpedantic -Werror -Wextra -c q_learning.c -o q_learning.o
clang q_learning.o -Wall -lm -o run
rm -rf q_learning.o
(8, 8) (7, 8) (6, 8) (6, 7) (5, 7) (4, 7) (4, 6) (3, 6) (2, 6) (2, 5) (1, 5) (0, 5) 
89
./run  0.00s user 0.00s system 51% cpu 0.008 total


==================================
Java implementation:
==================================
javac Q_Learning.java
(8, 8) (7, 8) (6, 8) (5, 8) (4, 8) (4, 7) (4, 6) (3, 6) (2, 6) (1, 6) (1, 5) (0, 5) 
89
java Q_Learning  0.26s user 0.04s system 144% cpu 0.211 total


==================================
C++ implementation:
==================================
rm -rf run
g++ -o run q_learning.cpp
(8, 8) (7, 8) (6, 8) (6, 7) (5, 7) (4, 7) (4, 6) (3, 6) (2, 6) (2, 5) (1, 5) (0, 5) 
89
./run  0.00s user 0.00s system 50% cpu 0.009 total

====================================================================
Epsilon: 0.9
Discount Factor: 0.9
Learning Rate: 0.9
Matrix width: 11
Matrix height: 11
Randomly generated matrix:
[[-100 -100 -100 -100 -100  100 -100 -100 -100 -100 -100]
 [-100   -1 -100   -1   -1   -1   -1   -1   -1   -1 -100]
 [-100   -1   -1   -1 -100   -1   -1 -100   -1 -100 -100]
 [-100   -1   -1 -100   -1   -1   -1   -1   -1   -1 -100]
 [-100   -1   -1 -100 -100   -1 -100   -1 -100   -1 -100]
 [-100 -100   -1   -1   -1   -1   -1 -100   -1 -100 -100]
 [-100   -1   -1   -1 -100 -100   -1   -1   -1   -1 -100]
 [-100 -100 -100   -1   -1   -1   -1   -1   -1   -1 -100]
 [-100   -1 -100 -100   -1   -1   -1   -1   -1   -1 -100]
 [-100   -1   -1 -100   -1 -100   -1   -1   -1   -1 -100]
 [-100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100]]

Testing the times of each implementation
==================================
Python implementation:
==================================
(8, 8) (7, 8) (7, 7) (6, 7) (6, 6) (5, 6) (5, 5) (4, 5) (3, 5) (2, 5) (1, 5) (0, 5) 
89.0
python3 q_learning.py  0.91s user 0.18s system 172% cpu 0.635 total


==================================
C implementation:
==================================
clang -Wall -Wpedantic -Werror -Wextra -c q_learning.c -o q_learning.o
clang q_learning.o -Wall -lm -o run
rm -rf q_learning.o
(8, 8) (7, 8) (6, 8) (6, 7) (6, 6) (5, 6) (5, 5) (4, 5) (3, 5) (2, 5) (1, 5) (0, 5) 
89
./run  0.00s user 0.00s system 51% cpu 0.008 total


==================================
Java implementation:
==================================
javac Q_Learning.java
time java Q_Learning
(8, 8) (7, 8) (6, 8) (6, 7) (6, 6) (5, 6) (5, 5) (4, 5) (3, 5) (2, 5) (1, 5) (0, 5) 
89
        0.18 real         0.24 user         0.03 sys


==================================
C++ implementation:
==================================
rm -rf run
g++ -o run q_learning.cpp
(8, 8) (7, 8) (6, 8) (6, 7) (6, 6) (5, 6) (5, 5) (4, 5) (3, 5) (2, 5) (1, 5) (0, 5) 
89
./run  0.00s user 0.00s system 49% cpu 0.008 total

====================================================================
Epsilon: 0.9
Discount Factor: 0.9
Learning Rate: 0.9
Matrix width: 12
Matrix height: 12
Randomly generated matrix:
[[-100 -100 -100 -100 -100 -100  100 -100 -100 -100 -100 -100]
 [-100   -1 -100 -100 -100   -1   -1   -1 -100   -1 -100 -100]
 [-100 -100   -1   -1   -1   -1   -1   -1   -1   -1   -1 -100]
 [-100   -1 -100   -1   -1   -1 -100   -1 -100   -1   -1 -100]
 [-100   -1   -1 -100   -1   -1   -1   -1   -1 -100   -1 -100]
 [-100   -1   -1 -100 -100   -1   -1   -1 -100 -100   -1 -100]
 [-100   -1 -100 -100 -100 -100 -100 -100   -1   -1   -1 -100]
 [-100   -1   -1   -1   -1   -1   -1 -100   -1   -1   -1 -100]
 [-100   -1   -1   -1   -1 -100   -1   -1   -1 -100   -1 -100]
 [-100   -1   -1   -1 -100 -100   -1 -100 -100 -100   -1 -100]
 [-100   -1 -100 -100   -1   -1 -100 -100   -1   -1 -100 -100]
 [-100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100]]

Testing the times of each implementation
==================================
Python implementation:
==================================
(8, 8) (7, 8) (7, 9) (7, 10) (6, 10) (5, 10) (4, 10) (3, 10) (2, 10) (2, 9) (2, 8) (2, 7) (2, 6) (1, 6) (0, 6) 
86.0
python3 q_learning.py  0.94s user 0.18s system 169% cpu 0.666 total


==================================
C implementation:
==================================
clang -Wall -Wpedantic -Werror -Wextra -c q_learning.c -o q_learning.o
clang q_learning.o -Wall -lm -o run
rm -rf q_learning.o
(8, 8) (7, 8) (6, 8) (6, 9) (6, 10) (5, 10) (4, 10) (3, 10) (3, 9) (2, 9) (2, 8) (2, 7) (1, 7) (1, 6) (0, 6) 
86
./run  0.00s user 0.00s system 55% cpu 0.007 total


==================================
Java implementation:
==================================
javac Q_Learning.java
(8, 8) (7, 8) (6, 8) (6, 9) (6, 10) (5, 10) (4, 10) (3, 10) (2, 10) (2, 9) (2, 8) (2, 7) (1, 7) (1, 6) (0, 6) 
86
java Q_Learning  0.25s user 0.04s system 150% cpu 0.190 total


==================================
C++ implementation:
==================================
rm -rf run
g++ -o run q_learning.cpp
(8, 8) (7, 8) (6, 8) (6, 9) (6, 10) (5, 10) (4, 10) (3, 10) (2, 10) (2, 9) (2, 8) (2, 7) (2, 6) (1, 6) (0, 6) 
86
./run  0.00s user 0.00s system 54% cpu 0.008 total

====================================================================
Epsilon: 0.9
Discount Factor: 0.9
Learning Rate: 0.9
Matrix width: 13
Matrix height: 13
Randomly generated matrix:
[[-100 -100 -100 -100 -100 -100  100 -100 -100 -100 -100 -100 -100]
 [-100   -1   -1   -1   -1   -1   -1   -1 -100 -100   -1   -1 -100]
 [-100   -1   -1   -1 -100 -100   -1   -1   -1   -1   -1 -100 -100]
 [-100 -100 -100   -1   -1 -100 -100   -1   -1   -1 -100   -1 -100]
 [-100 -100   -1   -1 -100 -100   -1   -1   -1   -1   -1 -100 -100]
 [-100   -1   -1 -100   -1 -100   -1   -1 -100 -100   -1   -1 -100]
 [-100   -1 -100   -1   -1 -100 -100 -100 -100   -1   -1   -1 -100]
 [-100   -1   -1 -100   -1   -1 -100 -100 -100   -1   -1   -1 -100]
 [-100 -100 -100   -1   -1   -1 -100   -1   -1   -1   -1 -100 -100]
 [-100   -1 -100 -100   -1   -1   -1   -1   -1 -100   -1   -1 -100]
 [-100   -1   -1   -1   -1   -1 -100 -100   -1   -1 -100   -1 -100]
 [-100   -1   -1   -1   -1   -1   -1   -1   -1   -1 -100 -100 -100]
 [-100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100]]

Testing the times of each implementation
==================================
Python implementation:
==================================
(8, 8) (8, 9) (7, 9) (6, 9) (6, 10) (5, 10) (4, 10) (4, 9) (4, 8) (3, 8) (3, 7) (2, 7) (1, 7) (1, 6) (0, 6) 
86.0
python3 q_learning.py  0.94s user 0.18s system 170% cpu 0.654 total


==================================
C implementation:
==================================
clang -Wall -Wpedantic -Werror -Wextra -c q_learning.c -o q_learning.o
clang q_learning.o -Wall -lm -o run
rm -rf q_learning.o
(8, 8) (8, 9) (7, 9) (6, 9) (6, 10) (5, 10) (4, 10) (4, 9) (3, 9) (3, 8) (3, 7) (2, 7) (1, 7) (1, 6) (0, 6) 
86
./run  0.00s user 0.00s system 56% cpu 0.008 total


==================================
Java implementation:
==================================
javac Q_Learning.java
(8, 8) (8, 9) (7, 9) (6, 9) (6, 10) (5, 10) (4, 10) (4, 9) (3, 9) (3, 8) (2, 8) (2, 7) (1, 7) (1, 6) (0, 6) 
86
java Q_Learning  0.26s user 0.04s system 154% cpu 0.193 total


==================================
C++ implementation:
==================================
rm -rf run
g++ -o run q_learning.cpp
(8, 8) (8, 9) (7, 9) (6, 9) (6, 10) (5, 10) (4, 10) (4, 9) (3, 9) (3, 8) (2, 8) (2, 7) (2, 6) (1, 6) (0, 6) 
86
./run  0.00s user 0.00s system 54% cpu 0.008 total

====================================================================
Epsilon: 0.9
Discount Factor: 0.9
Learning Rate: 0.9
Matrix width: 14
Matrix height: 14
Randomly generated matrix:
[[-100 -100 -100 -100 -100 -100 -100  100 -100 -100 -100 -100 -100 -100]
 [-100   -1 -100   -1   -1   -1   -1   -1 -100   -1 -100   -1 -100 -100]
 [-100   -1 -100   -1   -1   -1 -100   -1 -100 -100   -1   -1   -1 -100]
 [-100   -1   -1   -1 -100   -1   -1   -1   -1 -100   -1 -100   -1 -100]
 [-100 -100   -1   -1   -1 -100   -1   -1   -1   -1   -1 -100 -100 -100]
 [-100   -1 -100   -1   -1   -1 -100   -1   -1 -100   -1 -100   -1 -100]
 [-100   -1   -1 -100   -1   -1   -1 -100 -100   -1   -1 -100   -1 -100]
 [-100 -100   -1 -100   -1   -1 -100   -1 -100   -1   -1   -1 -100 -100]
 [-100 -100   -1 -100   -1 -100   -1   -1   -1   -1   -1   -1   -1 -100]
 [-100   -1   -1   -1   -1 -100   -1 -100 -100 -100   -1   -1   -1 -100]
 [-100   -1   -1   -1 -100   -1 -100   -1 -100   -1 -100   -1 -100 -100]
 [-100 -100 -100 -100 -100   -1   -1   -1   -1   -1 -100   -1   -1 -100]
 [-100   -1   -1   -1   -1 -100   -1   -1 -100 -100   -1 -100   -1 -100]
 [-100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100]]

Testing the times of each implementation
==================================
Python implementation:
==================================
(8, 8) (8, 9) (8, 10) (7, 10) (6, 10) (5, 10) (4, 10) (4, 9) (4, 8) (4, 7) (3, 7) (2, 7) (1, 7) (0, 7) 
87.0
python3 q_learning.py  0.98s user 0.26s system 122% cpu 1.015 total


==================================
C implementation:
==================================
clang -Wall -Wpedantic -Werror -Wextra -c q_learning.c -o q_learning.o
clang q_learning.o -Wall -lm -o run
rm -rf q_learning.o
(8, 8) (8, 9) (7, 9) (6, 9) (6, 10) (5, 10) (4, 10) (4, 9) (4, 8) (4, 7) (3, 7) (2, 7) (1, 7) (0, 7) 
87
./run  0.00s user 0.00s system 8% cpu 0.051 total


==================================
Java implementation:
==================================
javac Q_Learning.java
(8, 8) (8, 9) (7, 9) (6, 9) (6, 10) (5, 10) (4, 10) (4, 9) (4, 8) (3, 8) (3, 7) (2, 7) (1, 7) (0, 7) 
87
java Q_Learning  0.29s user 0.05s system 148% cpu 0.225 total


==================================
C++ implementation:
==================================
rm -rf run
g++ -o run q_learning.cpp
(8, 8) (8, 9) (7, 9) (6, 9) (6, 10) (5, 10) (4, 10) (4, 9) (4, 8) (4, 7) (3, 7) (2, 7) (1, 7) (0, 7) 
87
./run  0.00s user 0.00s system 54% cpu 0.009 total

====================================================================
Epsilon: 0.9
Discount Factor: 0.9
Learning Rate: 0.9
Matrix width: 15
Matrix height: 15
Randomly generated matrix:
[[-100 -100 -100 -100 -100 -100 -100  100 -100 -100 -100 -100 -100 -100
  -100]
 [-100   -1   -1   -1   -1 -100   -1   -1   -1   -1   -1 -100   -1 -100
  -100]
 [-100   -1   -1   -1   -1   -1   -1 -100 -100 -100   -1   -1   -1   -1
  -100]
 [-100   -1   -1   -1   -1   -1 -100 -100   -1 -100   -1 -100 -100   -1
  -100]
 [-100   -1 -100   -1   -1   -1   -1 -100   -1   -1   -1   -1   -1   -1
  -100]
 [-100 -100 -100   -1   -1   -1   -1   -1   -1   -1   -1   -1 -100   -1
  -100]
 [-100 -100   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1 -100 -100
  -100]
 [-100 -100   -1   -1 -100   -1 -100 -100 -100   -1   -1   -1   -1   -1
  -100]
 [-100   -1   -1   -1 -100 -100 -100   -1   -1   -1 -100 -100 -100   -1
  -100]
 [-100 -100   -1 -100 -100   -1   -1 -100 -100   -1 -100   -1 -100   -1
  -100]
 [-100   -1 -100   -1 -100 -100   -1   -1   -1   -1   -1 -100   -1   -1
  -100]
 [-100   -1   -1   -1   -1   -1   -1 -100 -100 -100 -100   -1   -1   -1
  -100]
 [-100 -100   -1   -1   -1   -1   -1   -1   -1   -1 -100   -1 -100 -100
  -100]
 [-100   -1   -1 -100   -1   -1   -1 -100   -1   -1 -100 -100 -100 -100
  -100]
 [-100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100
  -100]]

Testing the times of each implementation
==================================
Python implementation:
==================================
(8, 8) (8, 9) (7, 9) (6, 9) (5, 9) (4, 9) (4, 10) (3, 10) (2, 10) (1, 10) (1, 9) (1, 8) (1, 7) (0, 7) 
87.0
python3 q_learning.py  1.03s user 0.24s system 160% cpu 0.789 total


==================================
C implementation:
==================================
clang -Wall -Wpedantic -Werror -Wextra -c q_learning.c -o q_learning.o
clang q_learning.o -Wall -lm -o run
rm -rf q_learning.o
(8, 8) (8, 9) (7, 9) (6, 9) (5, 9) (4, 9) (4, 10) (3, 10) (2, 10) (1, 10) (1, 9) (1, 8) (1, 7) (0, 7) 
87
./run  0.00s user 0.00s system 50% cpu 0.008 total


==================================
Java implementation:
==================================
javac Q_Learning.java
(8, 8) (8, 9) (7, 9) (6, 9) (5, 9) (4, 9) (4, 10) (3, 10) (2, 10) (1, 10) (1, 9) (1, 8) (1, 7) (0, 7) 
87
java Q_Learning  0.26s user 0.04s system 136% cpu 0.219 total


==================================
C++ implementation:
==================================
rm -rf run
g++ -o run q_learning.cpp
(8, 8) (8, 9) (7, 9) (6, 9) (5, 9) (4, 9) (4, 10) (3, 10) (2, 10) (1, 10) (1, 9) (1, 8) (1, 7) (0, 7) 
87
./run  0.00s user 0.00s system 52% cpu 0.009 total

====================================================================
Epsilon: 0.9
Discount Factor: 0.9
Learning Rate: 0.9
Matrix width: 16
Matrix height: 16
Randomly generated matrix:
[[-100 -100 -100 -100 -100 -100 -100 -100  100 -100 -100 -100 -100 -100
  -100 -100]
 [-100   -1 -100   -1   -1 -100 -100   -1   -1   -1   -1 -100   -1   -1
    -1 -100]
 [-100   -1   -1   -1 -100 -100 -100   -1   -1   -1   -1   -1   -1   -1
  -100 -100]
 [-100   -1   -1 -100   -1 -100   -1   -1   -1   -1   -1   -1   -1   -1
  -100 -100]
 [-100   -1   -1 -100 -100   -1 -100 -100   -1 -100 -100 -100 -100 -100
    -1 -100]
 [-100   -1 -100   -1   -1 -100   -1 -100   -1   -1 -100   -1 -100   -1
    -1 -100]
 [-100   -1   -1 -100 -100   -1   -1   -1   -1   -1 -100   -1   -1 -100
  -100 -100]
 [-100   -1   -1   -1   -1   -1 -100   -1 -100 -100 -100   -1   -1 -100
    -1 -100]
 [-100 -100   -1 -100   -1   -1 -100   -1   -1 -100 -100   -1   -1   -1
  -100 -100]
 [-100 -100   -1   -1   -1   -1   -1   -1   -1 -100   -1 -100   -1   -1
  -100 -100]
 [-100   -1   -1 -100   -1   -1   -1 -100   -1   -1 -100   -1 -100   -1
    -1 -100]
 [-100 -100 -100 -100   -1   -1   -1   -1   -1   -1   -1   -1   -1 -100
  -100 -100]
 [-100   -1   -1   -1 -100   -1   -1   -1   -1 -100   -1 -100 -100   -1
  -100 -100]
 [-100   -1 -100   -1   -1 -100   -1   -1 -100   -1   -1   -1   -1   -1
  -100 -100]
 [-100 -100 -100   -1   -1   -1   -1   -1 -100 -100   -1   -1   -1   -1
  -100 -100]
 [-100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100
  -100 -100]]

Testing the times of each implementation
==================================
Python implementation:
==================================
(8, 8) (9, 8) (9, 7) (8, 7) (7, 7) (6, 7) (6, 8) (5, 8) (4, 8) (3, 8) (2, 8) (1, 8) (0, 8) 
88.0
python3 q_learning.py  0.99s user 0.27s system 120% cpu 1.041 total


==================================
C implementation:
==================================
clang -Wall -Wpedantic -Werror -Wextra -c q_learning.c -o q_learning.o
clang q_learning.o -Wall -lm -o run
rm -rf q_learning.o
(8, 8) (8, 7) (7, 7) (6, 7) (6, 8) (5, 8) (4, 8) (3, 8) (2, 8) (1, 8) (0, 8) 
90
./run  0.00s user 0.00s system 51% cpu 0.007 total


==================================
Java implementation:
==================================
javac Q_Learning.java
(8, 8) (8, 7) (7, 7) (6, 7) (6, 8) (5, 8) (4, 8) (3, 8) (2, 8) (1, 8) (0, 8) 
90
java Q_Learning  0.28s user 0.05s system 145% cpu 0.221 total


==================================
C++ implementation:
==================================
rm -rf run
g++ -o run q_learning.cpp
(8, 8) (8, 7) (7, 7) (6, 7) (6, 8) (5, 8) (4, 8) (3, 8) (2, 8) (1, 8) (0, 8) 
90
./run  0.00s user 0.00s system 49% cpu 0.009 total

====================================================================
Epsilon: 0.9
Discount Factor: 0.9
Learning Rate: 0.9
Matrix width: 17
Matrix height: 17
Randomly generated matrix:
[[-100 -100 -100 -100 -100 -100 -100 -100  100 -100 -100 -100 -100 -100
  -100 -100 -100]
 [-100   -1 -100 -100 -100 -100   -1   -1   -1   -1   -1 -100 -100 -100
    -1 -100 -100]
 [-100   -1   -1   -1   -1   -1   -1   -1 -100 -100 -100   -1 -100 -100
    -1   -1 -100]
 [-100   -1   -1   -1 -100   -1   -1   -1   -1 -100 -100   -1   -1   -1
    -1   -1 -100]
 [-100   -1   -1   -1 -100 -100   -1   -1 -100 -100   -1   -1 -100 -100
    -1   -1 -100]
 [-100   -1   -1 -100 -100   -1 -100   -1   -1   -1 -100   -1   -1 -100
  -100   -1 -100]
 [-100   -1   -1   -1   -1 -100   -1 -100   -1 -100 -100   -1 -100 -100
  -100 -100 -100]
 [-100   -1   -1   -1   -1   -1 -100   -1   -1 -100   -1   -1   -1   -1
    -1   -1 -100]
 [-100   -1   -1   -1   -1   -1   -1   -1   -1   -1 -100 -100 -100   -1
    -1 -100 -100]
 [-100 -100 -100   -1 -100 -100   -1   -1   -1   -1 -100   -1   -1 -100
    -1 -100 -100]
 [-100 -100 -100 -100   -1   -1 -100   -1   -1   -1 -100   -1   -1   -1
    -1 -100 -100]
 [-100   -1 -100 -100   -1 -100   -1   -1   -1 -100   -1   -1   -1 -100
    -1   -1 -100]
 [-100   -1 -100   -1   -1   -1   -1   -1   -1   -1   -1 -100   -1 -100
    -1   -1 -100]
 [-100   -1   -1   -1   -1   -1   -1 -100 -100 -100   -1 -100   -1 -100
    -1   -1 -100]
 [-100 -100   -1   -1 -100 -100   -1   -1 -100 -100   -1   -1 -100   -1
    -1   -1 -100]
 [-100   -1   -1 -100 -100   -1   -1 -100   -1 -100   -1 -100   -1 -100
    -1 -100 -100]
 [-100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100
  -100 -100 -100]]

Testing the times of each implementation
==================================
Python implementation:
==================================
(8, 8) (7, 8) (6, 8) (5, 8) (5, 7) (4, 7) (3, 7) (2, 7) (1, 7) (1, 8) (0, 8) 
90.0
python3 q_learning.py  1.02s user 0.25s system 124% cpu 1.021 total


==================================
C implementation:
==================================
clang -Wall -Wpedantic -Werror -Wextra -c q_learning.c -o q_learning.o
clang q_learning.o -Wall -lm -o run
rm -rf q_learning.o
(8, 8) (7, 8) (6, 8) (5, 8) (5, 7) (4, 7) (3, 7) (2, 7) (1, 7) (1, 8) (0, 8) 
90
./run  0.00s user 0.00s system 53% cpu 0.008 total


==================================
Java implementation:
==================================
javac Q_Learning.java
(8, 8) (7, 8) (6, 8) (5, 8) (5, 7) (4, 7) (3, 7) (2, 7) (1, 7) (1, 8) (0, 8) 
90
java Q_Learning  0.25s user 0.04s system 147% cpu 0.193 total


==================================
C++ implementation:
==================================
rm -rf run
g++ -o run q_learning.cpp
(8, 8) (7, 8) (6, 8) (5, 8) (5, 7) (4, 7) (3, 7) (2, 7) (1, 7) (1, 8) (0, 8) 
90
./run  0.00s user 0.00s system 52% cpu 0.009 total


====================================================================
Epsilon: 0.9
Discount Factor: 0.9
Learning Rate: 0.9
Matrix width: 18
Matrix height: 18
Randomly generated matrix:
[[-100 -100 -100 -100 -100 -100 -100 -100 -100  100 -100 -100 -100 -100
  -100 -100 -100 -100]
 [-100 -100   -1 -100 -100   -1   -1   -1 -100   -1 -100 -100 -100 -100
    -1   -1 -100 -100]
 [-100 -100   -1   -1   -1   -1   -1   -1   -1   -1 -100   -1   -1   -1
  -100   -1   -1 -100]
 [-100   -1   -1   -1   -1 -100 -100 -100 -100   -1   -1   -1   -1   -1
    -1   -1   -1 -100]
 [-100   -1 -100   -1 -100   -1   -1 -100 -100 -100 -100   -1   -1   -1
    -1 -100   -1 -100]
 [-100   -1   -1   -1   -1   -1   -1   -1   -1   -1   -1 -100   -1 -100
    -1   -1   -1 -100]
 [-100   -1   -1 -100   -1   -1 -100 -100   -1   -1 -100   -1   -1 -100
    -1 -100 -100 -100]
 [-100   -1   -1   -1   -1   -1   -1 -100   -1 -100 -100 -100   -1 -100
    -1   -1   -1 -100]
 [-100   -1   -1   -1   -1   -1 -100   -1   -1   -1   -1   -1 -100   -1
  -100 -100   -1 -100]
 [-100 -100 -100   -1   -1 -100   -1   -1   -1   -1   -1   -1   -1   -1
  -100   -1 -100 -100]
 [-100 -100   -1 -100 -100 -100 -100 -100 -100   -1 -100   -1   -1 -100
  -100 -100 -100 -100]
 [-100   -1 -100   -1   -1   -1   -1   -1   -1   -1   -1 -100   -1   -1
    -1   -1   -1 -100]
 [-100 -100 -100   -1 -100 -100   -1 -100 -100 -100 -100   -1   -1 -100
    -1   -1   -1 -100]
 [-100   -1   -1   -1 -100   -1   -1   -1   -1   -1   -1 -100   -1 -100
  -100   -1 -100 -100]
 [-100   -1 -100 -100   -1   -1   -1   -1   -1   -1   -1   -1 -100   -1
    -1   -1   -1 -100]
 [-100 -100   -1   -1   -1 -100   -1   -1   -1   -1   -1 -100   -1   -1
  -100 -100   -1 -100]
 [-100   -1 -100   -1   -1   -1 -100 -100 -100   -1 -100   -1 -100 -100
  -100 -100   -1 -100]
 [-100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100
  -100 -100 -100 -100]]

Testing the times of each implementation
==================================
Python implementation:
==================================
(8, 8) (7, 8) (6, 8) (5, 8) (5, 7) (5, 6) (5, 5) (5, 4) (5, 3) (4, 3) (3, 3) (3, 4) (2, 4) (2, 5) (2, 6) (2, 7) (2, 8) (2, 9) (1, 9) (0, 9) 
81.0
python3 q_learning.py  1.03s user 0.20s system 161% cpu 0.761 total


==================================
C implementation:
==================================
clang -Wall -Wpedantic -Werror -Wextra -c q_learning.c -o q_learning.o
clang q_learning.o -Wall -lm -o run
rm -rf q_learning.o
(8, 8) (7, 8) (6, 8) (5, 8) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (0, 0) 
-201
./run  0.00s user 0.00s system 53% cpu 0.009 total


==================================
Java implementation:
==================================
javac Q_Learning.java
(8, 8) (7, 8) (6, 8) (5, 8) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) 
-101
java Q_Learning  0.26s user 0.04s system 156% cpu 0.195 total


==================================
C++ implementation:
==================================
rm -rf run
g++ -o run q_learning.cpp
(8, 8) (7, 8) (6, 8) (5, 8) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) (5, 10) (5, 9) 
-101
./run  0.00s user 0.00s system 54% cpu 0.010 total
